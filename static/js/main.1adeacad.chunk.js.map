{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","readData","setRData","captureddData","setCData","flag","setScanFlag","webcamRef","useRef","codeReader","BrowserMultiFormatReader","capture","useCallback","imageSrc","current","getScreenshot","width","height","decodeFromImage","undefined","then","result","text","catch","err","console","log","useEffect","setInterval","onClick","setTimeout","ref","screenshotFormat","screenshotQuality","videoConstraints","facingMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA6FeA,MAzFf,WACI,MAA6BC,IAAMC,SAAS,cAA5C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,IAAMC,SAAS,mBAAjD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4BL,IAAMC,UAAS,GAA3C,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAYR,IAAMS,OAAO,MACzBC,EAAa,IAAIC,2BAEjBC,EAAUZ,IAAMa,aAClB,WAAO,IAAD,EACIC,EAAQ,OAAGN,QAAH,IAAGA,GAAH,UAAGA,EAAWO,eAAd,aAAG,EAAoBC,cAAc,CAACC,MAAO,KAAMC,OAAQ,OACrEJ,GACAJ,EAAWS,qBAAgBC,EAAWN,GAAUO,MAAK,SAAAC,GAC7CA,GACAnB,EAASmB,EAAOC,SAErBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAIxB,CAACf,EAAYP,IAyBjB,OAtBAH,IAAM4B,WAAU,WACZC,YAAYjB,EAAS,OACtB,IAqBC,qCACI,2DAC+BR,EAE3B,wBAEEE,GACE,wBAAQwB,QApBP,WACbvB,GAAY,GACZwB,YAAW,WACP5B,EAAS,yBACV,MAgBS,6BAOR,uBACCG,GACG,qCACI,cAAC,IAAD,CACIW,MAAO,IACPC,OAAQ,IACRc,IAAKxB,EACLyB,iBAAiB,YACjBC,kBAAmB,EACnBC,iBAAkB,CACdC,WAAY,iBAIpB,uBAEA,8DAAmClC,KAEnC,wBAAQ4B,QAtCJ,WAChBzB,EAASH,GACTK,GAAY,IAoCA,iCCvEL8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1adeacad.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserMultiFormatReader, Result } from '@zxing/library'\nimport Webcam from 'react-webcam'\n\nfunction App() {\n    const [readData, setRData] = React.useState('Reading...');\n    const [captureddData, setCData] = React.useState('Noting Captured');\n    const [flag, setScanFlag] = React.useState(false);\n\n    const webcamRef = React.useRef(null)\n    const codeReader = new BrowserMultiFormatReader()\n\n    const capture = React.useCallback(\n        () => {\n            const imageSrc = webcamRef?.current?.getScreenshot({width: 1920, height: 1080})\n            if (imageSrc) {\n                codeReader.decodeFromImage(undefined, imageSrc).then(result => {\n                    if (result) {\n                        setRData(result.text);\n                    }\n                }).catch((err) => {\n                    console.log(err)\n                })\n            }\n        },\n        [codeReader, setRData]\n    )\n\n    React.useEffect(() => {\n        setInterval(capture, 100)\n    }, []);\n\n    const onUpdate = (err, result) => {\n        if (result) {\n            setRData(result.text);\n        }\n    }\n\n    const flipScan = () => {\n        setScanFlag(true);\n        setTimeout(() => {\n            setRData(\"Could not read Data\")\n        }, 10000);\n    }\n\n    const captureData = () => {\n        setCData(readData);\n        setScanFlag(false);\n    }\n\n    return (\n        <>\n            <div>\n                V1: Captured Data: &nbsp; {captureddData}\n\n                <br />\n\n                {!flag &&\n                    <button onClick={flipScan}>\n                        Scan Barcode\n                    </button>\n                }\n\n            </div>\n\n            <br />\n            {flag &&\n                <>\n                    <Webcam\n                        width={500}\n                        height={350}\n                        ref={webcamRef}\n                        screenshotFormat=\"image/png\"\n                        screenshotQuality={1}\n                        videoConstraints={{\n                            facingMode: 'environment'\n                        }}\n                    />\n\n                    <br />\n\n                    <p>Barcode from Image is : &nbsp; {readData}</p>\n\n                    <button onClick={captureData}>\n                        Capture Data\n                    </button>\n                </>\n            }\n\n        </>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}