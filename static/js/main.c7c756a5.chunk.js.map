{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","readData","setRData","captureddData","setCData","flag","setScanFlag","onClick","setTimeout","width","height","onUpdate","err","result","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAgEeA,MA7Df,WACI,MAA6BC,IAAMC,SAAS,cAA5C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,IAAMC,SAAS,mBAAjD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4BL,IAAMC,UAAS,GAA3C,mBAAOK,EAAP,KAAaC,EAAb,KAoBA,OACI,qCACI,2DAC+BH,EAE3B,wBAEGE,GACC,wBAAQE,QApBP,WACbD,GAAY,GACZE,YAAW,WACPN,EAAS,yBACV,MAgBS,6BAOR,uBACEG,GACE,qCACI,cAAC,IAAD,CACII,MAAO,IACPC,OAAQ,IACRC,SAvCS,SAACC,EAAKC,GAC3BA,GACAX,EAASW,EAAOC,SAwCR,uBAEA,8DAAmCb,KAEnC,wBAAQM,QAjCJ,WAChBH,EAASH,GACTK,GAAY,IA+BA,iCC1CLS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7c756a5.chunk.js","sourcesContent":["import BarcodeScannerComponent from \"react-webcam-barcode-scanner\";\nimport React from \"react\";\n\nfunction App() {\n    const [readData, setRData] = React.useState('Reading...');\n    const [captureddData, setCData] = React.useState('Noting Captured');\n    const [flag, setScanFlag] = React.useState(false);\n\n    const barcodeUpdateHandler = (err, result) => {\n        if (result) {\n            setRData(result.text);\n        } \n    }\n\n    const flipScan = () => {\n        setScanFlag(true);\n        setTimeout(() => {\n            setRData(\"Could not read Data\")\n        }, 10000);\n    }\n\n    const captureData = () => {\n        setCData(readData);\n        setScanFlag(false);\n    }\n\n    return (\n        <>\n            <div>\n                V1: Captured Data: &nbsp; {captureddData}\n\n                <br />\n\n                { !flag &&\n                    <button onClick={flipScan}>\n                        Scan Barcode\n                    </button>\n                }\n\n            </div>\n\n            <br />\n            { flag &&\n                <>\n                    <BarcodeScannerComponent\n                        width={500}\n                        height={350}\n                        onUpdate={barcodeUpdateHandler}\n                    />\n\n                    <br />\n\n                    <p>Barcode from Image is : &nbsp; {readData}</p>\n\n                    <button onClick={captureData}>\n                        Capture Data\n                    </button>\n                </>\n            }\n\n        </>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}