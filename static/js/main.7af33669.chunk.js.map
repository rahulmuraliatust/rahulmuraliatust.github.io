{"version":3,"sources":["components/Scanner.js","App.js","reportWebVitals.js","index.js"],"names":["Scanner","props","onDetected","drawingCtx","drawingCanvas","useEffect","Quagga","init","config","err","console","log","start","stop","onProcessed","result","canvas","ctx","overlay","dom","boxes","clearRect","Number","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","detected","React","setInterval","clear","id","className","App","useState","camera","setCamera","setResult","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA2GeA,EAvGC,SAACC,GACb,IAAQC,EAAeD,EAAfC,WAEJC,EAAa,KACbC,EAAgB,KAEpBC,qBAAU,WACNC,IAAOC,KAAKC,GAAQ,SAACC,GAKjB,OAJIA,GACAC,QAAQC,IAAIF,EAAK,aAErBH,IAAOM,QACA,WACHN,IAAOO,WAKfP,IAAOQ,aAAY,SAACC,GAChBZ,EAAaG,IAAOU,OAAOC,IAAIC,QAC/Bd,EAAgBE,IAAOU,OAAOG,IAAID,QAE9BH,IACIA,EAAOK,QACPjB,EAAWkB,UACP,EACA,EACAC,OAAOlB,EAAcmB,aAAa,UAClCD,OAAOlB,EAAcmB,aAAa,YAEtCR,EAAOK,MACFI,QAAO,SAAUC,GACd,OAAOA,IAAQV,EAAOU,OAEzBC,SAAQ,SAAUD,GACfnB,IAAOqB,WAAWC,SAASH,EAAK,CAAEI,EAAG,EAAGC,EAAG,GAAK3B,EAAY,CACxD4B,MAAO,QACPC,UAAW,QAKvBjB,EAAOU,KACPnB,IAAOqB,WAAWC,SAASb,EAAOU,IAAK,CAAEI,EAAG,EAAGC,EAAG,GAAK3B,EAAY,CAC/D4B,MAAO,OACPC,UAAW,IAIfjB,EAAOkB,YAAclB,EAAOkB,WAAWC,MAAQnB,EAAOU,MAEtDtB,EAAWkB,UACP,EACA,EACAC,OAAOlB,EAAcmB,aAAa,UAClCD,OAAOlB,EAAcmB,aAAa,YAGtCjB,IAAOqB,WAAWC,SAASb,EAAOU,IAAK,CAAEI,EAAG,EAAGC,EAAG,GAAK3B,EAAY,CAC/D4B,MAAO,OACPC,UAAW,IAGf1B,IAAOqB,WAAWC,SACdb,EAAOoB,KAAM,CAAEN,EAAG,IAAKC,EAAG,KAC1B3B,EAAY,CAAE4B,MAAO,MAAOC,UAAW,SAMvD1B,IAAOJ,WAAWkC,KACnB,IAEHC,IAAMhC,WAAU,WACZiC,YAAYC,EAAO,OACpB,IAEH,IAAMA,EAAQ,WACNpC,GACAA,EAAWkB,UACP,EACA,EACAC,OAAOlB,EAAcmB,aAAa,UAClCD,OAAOlB,EAAcmB,aAAa,aAKxCa,EAAW,SAACrB,GACdb,EAAWa,EAAOkB,WAAWC,OAGjC,OAII,aAHA,CAGA,OACQM,GAAG,cACPC,UAAU,c,MC5EPC,MArBf,WACI,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,MAArC,mBAAO5B,EAAP,KAAe+B,EAAf,KAMA,OACI,sBAAKL,UAAU,MAAf,UACA,kCAAK1B,GAAkB,cAAvB,OACA,yBAAQgC,QACI,kBAAMF,GAAWD,IAD7B,cACyCA,EAAS,OAAS,WAE3D,qBAAKH,UAAU,YAAf,SACCG,GAAU,cAAE,EAAF,CAAU1C,WAXN,SAAAa,GACf+B,EAAU/B,YCCHiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7af33669.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport config from \"./config.json\";\r\nimport Quagga from \"quagga\";\r\n\r\nconst Scanner = (props) => {\r\n    const { onDetected } = props;\r\n\r\n    let drawingCtx = null;\r\n    let drawingCanvas = null;\r\n\r\n    useEffect(() => {\r\n        Quagga.init(config, (err) => {\r\n            if (err) {\r\n                console.log(err, \"error msg\");\r\n            }\r\n            Quagga.start();\r\n            return () => {\r\n                Quagga.stop();\r\n            };\r\n        });\r\n\r\n        //detecting boxes on stream\r\n        Quagga.onProcessed((result) => {\r\n            drawingCtx = Quagga.canvas.ctx.overlay;\r\n            drawingCanvas = Quagga.canvas.dom.overlay;\r\n\r\n            if (result) {\r\n                if (result.boxes) {\r\n                    drawingCtx.clearRect(\r\n                        0,\r\n                        0,\r\n                        Number(drawingCanvas.getAttribute(\"width\")),\r\n                        Number(drawingCanvas.getAttribute(\"height\"))\r\n                    );\r\n                    result.boxes\r\n                        .filter(function (box) {\r\n                            return box !== result.box;\r\n                        })\r\n                        .forEach(function (box) {\r\n                            Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\r\n                                color: \"green\",\r\n                                lineWidth: 2\r\n                            });\r\n                        });\r\n                }\r\n\r\n                if (result.box) {\r\n                    Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\r\n                        color: \"#00F\",\r\n                        lineWidth: 2\r\n                    });\r\n                }\r\n\r\n                if (result.codeResult && result.codeResult.code && result.box) {\r\n\r\n                    drawingCtx.clearRect(\r\n                        0,\r\n                        0,\r\n                        Number(drawingCanvas.getAttribute(\"width\")),\r\n                        Number(drawingCanvas.getAttribute(\"height\"))\r\n                    );\r\n\r\n                    Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\r\n                        color: \"#00F\",\r\n                        lineWidth: 2\r\n                    });\r\n\r\n                    Quagga.ImageDebug.drawPath(\r\n                        result.line, { x: \"x\", y: \"y\" },\r\n                        drawingCtx, { color: \"red\", lineWidth: 3 }\r\n                    );\r\n                }\r\n            }\r\n        });\r\n\r\n        Quagga.onDetected(detected);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        setInterval(clear, 2000)\r\n    }, []);\r\n\r\n    const clear = () => {\r\n        if (drawingCtx) {\r\n            drawingCtx.clearRect(\r\n                0,\r\n                0,\r\n                Number(drawingCanvas.getAttribute(\"width\")),\r\n                Number(drawingCanvas.getAttribute(\"height\"))\r\n            );\r\n        }\r\n    };\r\n\r\n    const detected = (result) => {\r\n        onDetected(result.codeResult.code);\r\n    };\r\n\r\n    return (\r\n        // If you do not specify a target,\r\n        // QuaggaJS would look for an element that matches\r\n        // the CSS selector #interactive.viewport\r\n        <\r\n            div id=\"interactive\"\r\n            className=\"viewport\" />\r\n    );\r\n};\r\n\r\nexport default Scanner;","import React, { useState } from \"react\";\r\nimport Scanner from \"./components/Scanner\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n    const [camera, setCamera] = useState(false);\r\n    const [result, setResult] = useState(null);\r\n\r\n    const onDetected = result => {\r\n        setResult(result);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\" >\r\n        <p> {result ? result : \"Scanning...\"} </p> \r\n        <button onClick={\r\n                    () => setCamera(!camera)} > {camera ? \"Stop\" : \"Start\"} \r\n                    </button> \r\n        <div className=\"container\" > \r\n        {camera && < Scanner onDetected={onDetected}/>} \r\n        </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}